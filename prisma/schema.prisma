// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// TODO DELETE THIS
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String                 @id @default(cuid())
    name              String?
    email             String?                @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    posts             Post[]
    mealPlans         MealPlan[]
    favoriteMealPlans UserFavoriteMealPlan[]
    favoriteMeals     UserFavoriteMeal[]
    favoriteRecipes   UserFavoriteRecipe[]
    prompts           UserPrompt[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

/**
 * Prompt
 */
model UserPrompt {
    id        String     @id @default(cuid())
    userId    String
    user      User       @relation(fields: [userId], references: [id])
    prompt    String
    mealPlans MealPlan[]
    createdAt DateTime   @default(now())
}

/**
 * MEALS
 */
model MealPlan {
    id            String                 @id @default(cuid())
    name          String
    totalCalories Int
    notes         String?
    createdAt     DateTime               @default(now())
    userId        String
    user          User                   @relation(fields: [userId], references: [id])
    meals         Meal[]
    tags          MealPlanTag[]
    favoritedBy   UserFavoriteMealPlan[]
    userPromptId  String
    userPrompt    UserPrompt             @relation(fields: [userPromptId], references: [id])
}

model Meal {
    id          String             @id @default(cuid())
    type        MealType
    name        String
    description String
    calories    Int
    mealPlanId  String
    mealPlan    MealPlan           @relation(fields: [mealPlanId], references: [id])
    recipes     Recipe[]           @relation("MealRecipes")
    favoritedBy UserFavoriteMeal[]
}

enum MealType {
    breakfast
    lunch
    dinner
    snack
}

model Recipe {
    id            String               @id @default(cuid())
    name          String
    instructions  String
    totalCalories Int
    totalFat      Float
    totalCarbs    Float
    totalProtein  Float
    ingredients   Ingredient[]
    meals         Meal[]               @relation("MealRecipes")
    favoritedBy   UserFavoriteRecipe[]
}

model Ingredient {
    id       Int    @id @default(autoincrement())
    recipeId String
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    name     String
    quantity String
    calories Float
    fat      Float
    carbs    Float
    protein  Float
}

/**
 * TAGS
 */
model Tag {
    id           Int           @id @default(autoincrement())
    name         String        @unique
    mealPlanTags MealPlanTag[]
}

model MealPlanTag {
    mealPlanId String
    tagId      Int
    mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
    tag        Tag      @relation(fields: [tagId], references: [id])

    @@id([mealPlanId, tagId])
}

/**
 * FAVORITES
 */
model UserFavoriteMealPlan {
    userId      String
    mealPlanId  String
    favoritedAt DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    mealPlan    MealPlan @relation(fields: [mealPlanId], references: [id])

    @@id([userId, mealPlanId])
}

model UserFavoriteMeal {
    userId      String
    mealId      String
    favoritedAt DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    meal        Meal     @relation(fields: [mealId], references: [id])

    @@id([userId, mealId])
}

model UserFavoriteRecipe {
    userId      String
    recipeId    String
    favoritedAt DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    recipe      Recipe   @relation(fields: [recipeId], references: [id])

    @@id([userId, recipeId])
}
